import sys
import os
import sqlite3
import itertools
import random

from app.general.views.info import DialogInfo
from app.general.check_html_parse import check_html_parse
from app.create_bot.ui.dialog_user_name_for_bot_ui import DialogUserNameForBotUi

from pathlib import Path
import PyQt5

qt_plugins_path = str(Path(PyQt5.__file__).parent / "Qt5" / "plugins")  # 1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏
if not Path(qt_plugins_path).exists():  # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    raise RuntimeError(f"Qt plugins not found at: {qt_plugins_path}")
os.environ["QT_QPA_PLATFORM_PLUGIN_PATH"] = qt_plugins_path  # 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏

# 4. –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PyQt5
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QLabel,QFileDialog, QCheckBox, QTextEdit
from PyQt5.QtCore import Qt, pyqtSignal

class DialogUserNameForBot(DialogUserNameForBotUi):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict: \n
    { \n
    'first_list': str, \n
    'second_list': str, \n
    'third_list': str, \n
    'use_first_list': bool, \n
    'use_second_list': bool, \n
    'use_third_list': bool, \n
    'set_numbers_end_user_name': bool \n
    }
    """
    data_returned = pyqtSignal(dict)

    def __init__(self, data: dict):
        super().__init__()
        self.root_project_dir = '..'

        # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self.textEdit_list_1.setText(data['first_list'])
        self.textEdit_list_2.setText(data['second_list'])
        self.textEdit_list_3.setText(data['third_list'])
        self.checkBox_use_list_1.setChecked(data['use_first_list'])
        self.checkBox_use_list_2.setChecked(data['use_second_list'])
        self.checkBox_use_list_3.setChecked(data['use_third_list'])
        self.checkBox_set_numbers_end_user_name.setChecked(data['set_numbers_end_user_name'])

        # —Å–æ–±—ã—Ç–∏—è
        self.pushButton_close.clicked.connect(lambda: self.close())
        self.pushButton_info.clicked.connect(lambda: self._info())
        self.pushButton_save.clicked.connect(lambda: self._save())

        self.textEdit_list_1.textChanged.connect(lambda: self._remove_spaces(self.textEdit_list_1))
        self.textEdit_list_2.textChanged.connect(lambda: self._remove_spaces(self.textEdit_list_2))
        self.textEdit_list_3.textChanged.connect(lambda: self._remove_spaces(self.textEdit_list_3))
        # —Å–æ–±—ã—Ç–∏—è

    def _generate_unique_user_name(self, data: list[str]) -> dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

        –†–∞–∑–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ –ø–æ –ø–µ—Ä–µ—Ö–æ–¥–∞–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        –∫—Ä–∏—Ç–µ—Ä–∏—è–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.

        Args:
        data (list[str]): –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–º—ë–Ω, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–º —Å—Ç—Ä–æ–∫–∏.

        Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–≤—É–º—è –∫–ª—é—á–∞–º–∏:
                - "user_names" (list): –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–º—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                - "there_are_inappropriate_values" (bool): –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ
                –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∏–º—ë–Ω –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        """
        generated_list = []
        try:
            counter = 0
            while True:
                generated_list.append(data[counter].lower().split('\n'))
                counter += 1
        except IndexError:
            pass

        if len(generated_list) == 1:
            user_name_list = generated_list[0]
        else:
            combinations = itertools.product(*generated_list)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            user_name_list = [''.join(combination) for combination in
                              combinations]  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–≤–∞ –≤ –∫–∞–∂–¥–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏

        result = []
        there_are_inappropriate_values = False
        for user_name in user_name_list:
            if len(user_name) < 1 or len(user_name) > 28:
                there_are_inappropriate_values = True
                continue
            if user_name[0] == '_' or user_name[len(user_name) - 1] == '_':
                there_are_inappropriate_values = True
                continue
            if user_name == "admin" or user_name == "telegram" or user_name == "support":
                there_are_inappropriate_values = True
                continue
            if user_name[0].isdigit():  # –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª —Ü–∏—Ñ—Ä–∞
                there_are_inappropriate_values = True
                continue
            result.append(user_name + '_bot')

        result = list((set(result)))  # —É–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
        random.shuffle(result)  # –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞

        return {"user_names": result, "there_are_inappropriate_values": there_are_inappropriate_values}

    def _info(self):
        info = DialogInfo('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                          '''–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ user_name –±–æ—Ç–∞
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
1. –î–ª–∏–Ω–∞: –æ—Ç 5 –¥–æ 28 —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ, –±–µ–∑ —É—á—ë—Ç–∞ –ø—Ä–∏–ø–∏—Å–∫–∏ _bot).
–ü—Ä–∏–ø–∏—Å–∫–∞ _bot –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!

2. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã:
–õ–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (a-z, A-Z) –¶–∏—Ñ—Ä—ã (0-9) –ù–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ (_)
–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, -, @, # –∏ —Ç. –¥.)
–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å (_) –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ (_)
–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã

3. –†–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è:
@USERNAME –∏ @username ‚Äî —ç—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ.
Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–º—è –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä.

4.–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å:
–ö–∞–∂–¥—ã–π username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤ —Ä–∞–º–∫–∞—Ö Telegram.
–ï—Å–ª–∏ –∏–º—è –∑–∞–Ω—è—Ç–æ, –ø—Ä–∏–¥—ë—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ.

5. –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∏–º–µ–Ω–∞:
–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞: admin, telegram, support.

üõ†Ô∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
User_name —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø—É—Ç—ë–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤.

–®–∞–≥–∏:
1. –û—Ç–º–µ—Ç—å—Ç–µ –≥–∞–ª–æ—á–∫–æ–π —Å–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω, –¥–≤–∞ –∏–ª–∏ –≤—Å–µ —Ç—Ä–∏).
2. –°–∏—Å—Ç–µ–º–∞ —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–µ—Ä–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É –∏–∑ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–º–µ—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç –∏—Ö –≤ user_name.

–ü—Ä–∏–º–µ—Ä:
- –ü–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫: –Ω–µ–æ–±—ã—á–Ω—ã–π, –±–æ–ª—å—à–æ–π, –º–∞–ª–µ–Ω—å–∫–∏–π
- –í—Ç–æ—Ä–æ–π —Å–ø–∏—Å–æ–∫: –∫–∞–Ω–∞–ª, –≥—Ä—É–ø–ø–∞, —á–∞—Ç
- –†–µ–∑—É–ª—å—Ç–∞—Ç: "–ù–µ–æ–±—ã—á–Ω—ã–π —á–∞—Ç", "–º–∞–ª–µ–Ω—å–∫–∏–π –∫–∞–Ω–∞–ª", "–±–æ–ª—å—à–∞—è –≥—Ä—É–ø–ø–∞" –∏ —Ç.–¥.

–í–∞–∂–Ω–æ:
- –ö–∞–∂–¥—ã–π user_name –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ.
- –°–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–∫–∞—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏.
                          ''',
                          'notification.mp3')
        info.exec_()

    def _save(self):
        use_list_1 = self.checkBox_use_list_1.isChecked()
        use_list_2 = self.checkBox_use_list_2.isChecked()
        use_list_3 = self.checkBox_use_list_3.isChecked()
        error_message = ''

        if (not self.checkBox_use_list_1.isChecked() and not self.checkBox_use_list_2.isChecked() and
                not self.checkBox_use_list_3.isChecked()):
            info = DialogInfo('–í–Ω–∏–º–∞–Ω–∏–µ!', '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫!', 'notification.mp3')
            info.exec_()
            return

        if len(self.textEdit_list_1.toPlainText().replace('\n', '')) < 1 and self.checkBox_use_list_1.isChecked():
            error_message += '–ü–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!\n—Ç.–∫. –≤ –Ω—ë–º –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞!\n'
            use_list_1 = False

        if len(self.textEdit_list_2.toPlainText().replace('\n', '')) < 1 and self.checkBox_use_list_2.isChecked():
            error_message += '–í—Ç–æ—Ä–æ–π —Å–ø–∏—Å–æ–∫ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!\n—Ç.–∫. –≤ –Ω—ë–º –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞!\n'
            use_list_2 = False

        if len(self.textEdit_list_3.toPlainText().replace('\n', '')) < 1 and self.checkBox_use_list_3.isChecked():
            error_message += '–¢—Ä–µ—Ç–∏–π —Å–ø–∏—Å–æ–∫ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!\n—Ç.–∫. –≤ –Ω—ë–º –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞!\n'
            use_list_3 = False

        if use_list_1 == False and use_list_2 == False and use_list_3 == False:
            info = DialogInfo('–í–Ω–∏–º–∞–Ω–∏–µ!', '–ù–∏ –æ–¥–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!',
                              'notification.mp3')
            info.exec_()
            return

        if error_message:
            info = DialogInfo('–í–Ω–∏–º–∞–Ω–∏–µ!', error_message, 'notification.mp3')
            info.exec_()

        list_for_generate_user_name = []  # —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö user_name –¥–ª—è –∫–∞–Ω–∞–ª–∞
        if use_list_1:
            list_for_generate_user_name.append(self.textEdit_list_1.toPlainText())
        if use_list_2:
            list_for_generate_user_name.append(self.textEdit_list_2.toPlainText())
        if use_list_3:
            list_for_generate_user_name.append(self.textEdit_list_3.toPlainText())

        dict_witch_user_names = self._generate_unique_user_name(list_for_generate_user_name)

        error_message_2 = ""
        if dict_witch_user_names["there_are_inappropriate_values"]:
            error_message_2 = ("\n\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ user_name —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, \n"
                               "–æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫. \n\n"
                               "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!\n"
                               "1. –î–ª–∏–Ω–∞: –æ—Ç 1 –¥–æ 28 —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –±–µ–∑ —É—á—ë—Ç–∞ –ø—Ä–∏–ø–∏—Å–∫–∏ _bot)\n"
                               "2. –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å (_) –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ (_)\n"
                               "3. –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã \n"
                               "4. @USERNAME –∏ @username ‚Äî —ç—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ")

        info = DialogInfo('–í–Ω–∏–º–∞–Ω–∏–µ!', f"–£–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å {len(dict_witch_user_names['user_names'])}"
                          + error_message_2, 'notification.mp3')
        info.exec_()

        self.data_returned.emit({
            'first_list': self.textEdit_list_1.toPlainText(),
            'second_list': self.textEdit_list_2.toPlainText(),
            'third_list': self.textEdit_list_3.toPlainText(),
            'use_first_list': use_list_1,
            'use_second_list': use_list_2,
            'use_third_list': use_list_3,
            'set_numbers_end_user_name': self.checkBox_set_numbers_end_user_name.isChecked(),
        })

        connection = sqlite3.connect(self.root_project_dir + '/working_files/data_base.sqlite3')
        cursor = connection.cursor()
        cursor.execute(
            f"UPDATE saved_data_creating_bots SET first_user_name_list = ?, second_user_name_list = ?, "
            f"third_user_name_list = ?",
            (self.textEdit_list_1.toPlainText(), self.textEdit_list_2.toPlainText(),self.textEdit_list_3.toPlainText()))
        connection.commit()
        connection.close()

        self.close()

    def _remove_spaces(self, text_edit: QTextEdit):
        cursor = text_edit.textCursor()
        text = text_edit.toPlainText()
        if " " in text:
            new_text = text.replace(" ", "")
            text_edit.setPlainText(new_text)
            text_edit.setTextCursor(cursor)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞